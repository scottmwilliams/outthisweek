{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"a",
				"ajax"
			],
			[
				"movie",
				"movies"
			],
			[
				"wid",
				"width"
			],
			[
				"wi",
				"width"
			],
			[
				"remove",
				"removeClass"
			],
			[
				"in",
				"inline-block"
			],
			[
				"rem",
				"removeClass"
			],
			[
				"ad",
				"addClass"
			],
			[
				"pos",
				"position"
			],
			[
				"po",
				"position"
			],
			[
				"cur",
				"currentTarget"
			],
			[
				"op",
				"opacity"
			],
			[
				"z",
				"z-index"
			],
			[
				"attr",
				"attributes"
			],
			[
				"f",
				"f	font"
			],
			[
				"b",
				"bdrs"
			],
			[
				"bord",
				"border-radius"
			],
			[
				"mari",
				"margin"
			],
			[
				"bgc",
				"bgc	background-color"
			],
			[
				"rend",
				"render"
			],
			[
				"_",
				"_bindAll"
			],
			[
				"render",
				"renderContent"
			],
			[
				"jQ",
				"jQuery.ajax	jQuery.ajax"
			],
			[
				"jQuer",
				"jQuery.browser	jQuery.browser.version"
			],
			[
				"sear",
				"searchTags"
			],
			[
				"client",
				"clientID"
			],
			[
				"ma",
				"margin"
			],
			[
				"back",
				"background-color"
			],
			[
				"pro",
				"prototype"
			],
			[
				"to",
				"toJSON"
			],
			[
				"an",
				"animate"
			],
			[
				"for",
				"forEach"
			],
			[
				"con",
				"container"
			],
			[
				"te",
				"template"
			],
			[
				"bind",
				"bindAll"
			],
			[
				"mod",
				"model"
			],
			[
				"images",
				"imagesPerRow"
			],
			[
				"di",
				"display"
			],
			[
				"complete",
				"completeUrl"
			],
			[
				"crea",
				"createURL"
			],
			[
				"comm",
				"commentCount"
			],
			[
				"sc",
				"script	Tag"
			],
			[
				"data",
				"dataset"
			],
			[
				"ima",
				"image"
			],
			[
				"mo",
				"model"
			],
			[
				"fun",
				"function"
			],
			[
				"al",
				"alert"
			],
			[
				"re",
				"render"
			],
			[
				"ap",
				"append"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "\n/**\n * Module dependencies.\n */\n\nvar express = require('express')\n  , routes = require('./routes')\n  , jsdom = require('jsdom')\n  , $ = require('jQuery')\n  , moment = require('moment')\n  , fs = require('fs');\n\nvar app = module.exports = express.createServer();\n\n// Configuration\n\napp.configure(function(){\n  app.set('views', __dirname + '/views');\n  app.set('view engine', 'jade');\n  app.use(express.bodyParser());\n  app.use(express.methodOverride());\n  app.use(app.router);\n  app.use(express.static(__dirname + '/public'));\n});\n\napp.configure('development', function(){\n  app.use(express.errorHandler({ dumpExceptions: true, showStack: true })); \n});\n\napp.configure('production', function(){\n  app.use(express.errorHandler()); \n});\n\n// Routes\napp.register('.html', require('jade'));\napp.get('/', function(req, res) {\n    fs.readFile(__dirname + '/public/index.html', 'utf8', function(err, text){\n        res.send(text);\n    });\n});\n\n\napp.listen(3000);\nconsole.log(\"Express server listening on port %d in %s mode\", app.address().port, app.settings.env);\n\n\n/////////  START OF GETTING RECENT FILMS FROM MDB ////////////\n\nvar tmdbCollection = [];\nvar tmdbCollectionFullDetails = [];\nvar date = getReleaseWeek();\nvar path = 'public/json/'+date;\nvar tomatoesRecent;\n\nvar tomatoesRequest = $.ajax({\n  url: 'http://api.rottentomatoes.com/api/public/v1.0/lists/dvds/new_releases.json?apikey=dtxq8gh9vybznax2hha3mcqg',\n  type: 'GET',\n  dataType: 'jsonp',\n  data: {}\n});\n\n$.when(tomatoesRequest).done(function(data){\n   tomatoesRecent = data;\n    var i = 0;\n    var numberOfFilms = ((tomatoesRecent.movies.length)-1);\n    fs.mkdir(path);\n    fs.writeFile(path+'/'+'all-movies.json', JSON.stringify(tomatoesRecent.movies, null, 4));\n\n      // for each item call the getMDBitem function below which builds the film collection\n      getMDBitem(tomatoesRecent.movies[i], tomatoesRecent.movies[i].title);\n\n      function getMDBitem(movieObj, movieTitle){\n        movieTitle = cleanTitle(movieTitle);\n              if(i < numberOfFilms){            \n                 var filename = path+'/'+movieTitle+'.json';\n                  var URL = 'http://api.themoviedb.org/3/search/movie?api_key=c1a2641a1bdc4fe90e68907afed3e1e5&query='+movieTitle;\n                  var ajaxURL = encodeURI(URL);\n                  $.ajax({\n                    url: ajaxURL,\n                    success: function(data, textStatus, xhr) {\n                      var movie = data; \n                      $.ajax({\n                        url: 'https://www.googleapis.com/youtube/v3/search?part=snippet&q='+movieTitle+'%20Official%20Trailer%20HD&key=AIzaSyAq6x7_2dfd3jH_iBIMzR1-oLFRzFXKMdY' \n                      }).success(function(data){\n                        movieObj.trailer = data.items[0].id.videoId;\n                        movieObj.poster_path = movie.results[0].poster_path;\n                        movieObj.backdrop_path = movie.results[0].backdrop_path;\n                        tmdbCollection.push(movieObj);\n                        console.log(i +' = '+ tomatoesRecent.movies[i].title);\n                        getMDBitem(tomatoesRecent.movies[i], tomatoesRecent.movies[i].title);\n                        i++;\n                      });\n                    }\n                  }); // end ajax call\n              }\n              else{\n                writeToFile();\n              }\n\n      }\n});\n\nfunction getReleaseWeek(){\n  var curr = new Date; // get current date\n  var first = curr.getDate() - curr.getDay(); // First day is the day of the month - the day of the week\n  var last = first + 6; // last day is the first day + 6\n\n  var firstday = new Date(curr.setDate(first)); // first sunday of the week\n\n  var momentObject = moment(firstday); // date converted to moment.js\n  var phasedDate = momentObject.format(\"D-M-YYYY\"); // format with moment.js\n\n  return phasedDate;\n}\n\n\n////// get configeration\n\n$.ajax({\n  url: 'http://api.themoviedb.org/3/configuration?api_key=c1a2641a1bdc4fe90e68907afed3e1e5' \n}).success(function(data){\n  fs.writeFile(path+'/'+'mdbConfig.json', JSON.stringify(data, null, 4));\n});\n\n////// functions called above\n\n// write the collection to a file\nfunction writeToFile(){\n    fs.writeFile(path+'/'+'movies.json', JSON.stringify(tmdbCollection, null, 4));\n}\n\n// removes odd charaters in titles\nfunction cleanTitle(title){\n  var symbols = {\n    '@': '%40',\n    '&amp;': 'and',\n    '*': '%2A',\n    '+': '%2B',\n    '/': '%2F',\n    '&lt;': '%3C',\n    '&gt;': '%3E'\n  };\n  title = title.replace(/([@*+/]|&(amp|lt|gt);)/g, function (m) { return symbols[m]; });\n  title = title.replace('&','and');\n  return title;\n}\n\n\n/////////  END OF GETTING RECENT FILMS FROM MDB ////////////\n\n\n",
			"file": "app.js",
			"file_size": 4695,
			"file_write_time": 1357595263000000,
			"settings":
			{
				"buffer_size": 4673,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n/**\n * Module dependencies.\n */\n\nvar express = require('express')\n  , routes = require('./routes')\n  , jsdom = require('jsdom')\n  , $ = require('jQuery')\n  , moment = require('moment')\n  , fs = require('fs');\n\nvar app = module.exports = express.createServer();\n\n// Configuration\n\napp.configure(function(){\n  app.set('views', __dirname + '/views');\n  app.set('view engine', 'jade');\n  app.use(express.bodyParser());\n  app.use(express.methodOverride());\n  app.use(app.router);\n  app.use(express.static(__dirname + '/public'));\n});\n\napp.configure('development', function(){\n  app.use(express.errorHandler({ dumpExceptions: true, showStack: true })); \n});\n\napp.configure('production', function(){\n  app.use(express.errorHandler()); \n});\n\n// Routes\napp.register('.html', require('jade'));\napp.get('/', function(req, res) {\n    fs.readFile(__dirname + '/public/index.html', 'utf8', function(err, text){\n        res.send(text);\n    });\n});\n\n\napp.listen(3000);\nconsole.log(\"Express server listening on port %d in %s mode\", app.address().port, app.settings.env);\n\n\n/////////  START OF GETTING RECENT FILMS FROM MDB ////////////\n\nvar tmdbCollection = [];\nvar tmdbCollectionFullDetails = [];\nvar date = getReleaseWeek();\nvar path = 'public/json/'+date;\nvar tomatoesRecent;\n\nvar tomatoesRequest = $.ajax({\n  url: 'http://api.rottentomatoes.com/api/public/v1.0/lists/dvds/new_releases.json?apikey=dtxq8gh9vybznax2hha3mcqg',\n  type: 'GET',\n  dataType: 'jsonp',\n  data: {}\n});\n\n$.when(tomatoesRequest).done(function(data){\n   tomatoesRecent = data;\n  \n    var i = 1;\n    fs.mkdir(path);\n    fs.writeFile(path+'/'+'all-movies.json', JSON.stringify(tomatoesRecent.movies, null, 4));\n\n    for(var x in tomatoesRecent.movies){\n      var movie = tomatoesRecent.movies[x];\n      console.log(movie);\n      // for each item call the getMDBitem function below which builds the film collection\n      getMDBitem(movie, movie.title);\n\n      function getMDBitem(movieObj, movieTitle){\n        movieTitle = cleanTitle(movieTitle);\n\n        var filename = path+'/'+movieTitle+'.json';\n        var URL = 'http://api.themoviedb.org/3/search/movie?api_key=c1a2641a1bdc4fe90e68907afed3e1e5&query='+movieTitle;\n        var ajaxURL = encodeURI(URL);\n        $.ajax({\n          url: ajaxURL,\n          success: function(data, textStatus, xhr) {\n            var movie = data; \n            movieObj.poster_path = data.results[0].poster_path;\n            movieObj.backdrop_path = data.results[0].backdrop_path;\n            tmdbCollection.push(movieObj);\n            writeToFile(i);\n            i++;\n            \n            // old line that writes out a file for each movie\n            // fs.writeFile(filename, JSON.stringify(data.results[0], null, 4));\n           \n          }\n        }); // end ajax call\n      } \n    } // end for in\n});\n\nfunction getReleaseWeek(){\n  var curr = new Date; // get current date\n  var first = curr.getDate() - curr.getDay(); // First day is the day of the month - the day of the week\n  var last = first + 6; // last day is the first day + 6\n\n  var firstday = new Date(curr.setDate(first)); // first sunday of the week\n\n  var momentObject = moment(firstday); // date converted to moment.js\n  var phasedDate = momentObject.format(\"D-M-YYYY\"); // format with moment.js\n\n  return phasedDate;\n}\n\n\n////// get configeration\n\n$.ajax({\n  url: 'http://api.themoviedb.org/3/configuration?api_key=c1a2641a1bdc4fe90e68907afed3e1e5' \n}).success(function(data){\n  fs.writeFile(path+'/'+'mdbConfig.json', JSON.stringify(data, null, 4));\n});\n\n////// functions called above\n\n// write the collection to a file\nfunction writeToFile(b){\n  if(b == tomatoesRecent.movies.length){ \n    fs.writeFile(path+'/'+'movies.json', JSON.stringify(tmdbCollection, null, 4));\n  }\n}\n\n// removes odd charaters in titles\nfunction cleanTitle(title){\n  var symbols = {\n    '@': '%40',\n    '&amp;': '%26',\n    '*': '%2A',\n    '+': '%2B',\n    '/': '%2F',\n    '&lt;': '%3C',\n    '&gt;': '%3E'\n  };\n  title = title.replace(/([@*+/]|&(amp|lt|gt);)/g, function (m) { return symbols[m]; });\n  return title;\n}\n\n\n/////////  END OF GETTING RECENT FILMS FROM MDB ////////////\n\n\n",
			"settings":
			{
				"buffer_size": 4121,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n/**\n * Module dependencies.\n */\n\nvar express = require('express')\n  , routes = require('./routes')\n  , jsdom = require('jsdom')\n  , $ = require('jQuery')\n  , moment = require('moment')\n  , fs = require('fs');\n\nvar app = module.exports = express.createServer();\n\n// Configuration\n\napp.configure(function(){\n  app.set('views', __dirname + '/views');\n  app.set('view engine', 'jade');\n  app.use(express.bodyParser());\n  app.use(express.methodOverride());\n  app.use(app.router);\n  app.use(express.static(__dirname + '/public'));\n});\n\napp.configure('development', function(){\n  app.use(express.errorHandler({ dumpExceptions: true, showStack: true })); \n});\n\napp.configure('production', function(){\n  app.use(express.errorHandler()); \n});\n\n// Routes\napp.register('.html', require('jade'));\napp.get('/', function(req, res) {\n    fs.readFile(__dirname + '/public/index.html', 'utf8', function(err, text){\n        res.send(text);\n    });\n});\n\n\napp.listen(3000);\nconsole.log(\"Express server listening on port %d in %s mode\", app.address().port, app.settings.env);\n\n\n/////////  START OF GETTING RECENT FILMS FROM MDB ////////////\n\nvar movieCollection = [];\nvar movieCollectionFullDetails = [];\nvar date = getReleaseWeek();\nvar path = 'public/json/'+date;\nvar tomatoesRecent;\n\nvar tomatoesRequest = $.ajax({\n  url: 'http://api.rottentomatoes.com/api/public/v1.0/lists/dvds/new_releases.json?apikey=dtxq8gh9vybznax2hha3mcqg',\n  type: 'GET',\n  dataType: 'jsonp',\n  data: {}\n});\n\n$.when(tomatoesRequest).done(function(data){\n   tomatoesRecent = data;\n\n  for(var x in tomatoesRecent.movies){\n    console.log(tomatoesRecent.movies[x].title)\n    console.log(tomatoesRecent.movies[x].release_dates.dvd);\n  }   \n  \n\n\n    var i = 1;\n    fs.mkdir(path);\n    fs.writeFile(path+'/'+'all-movies.json', JSON.stringify(tomatoesRecent.movies, null, 4));\n\n    for(var x in tomatoesRecent.movies){\n      var currentMovie = tomatoesRecent.movies[x].title;\n      // for each item call the getMDBitem function below which builds the film collection\n      getMDBitem(currentMovie);\n\n      function getMDBitem(theMovie){\n        theMovie = cleanTitle(theMovie);\n\n        var filename = path+'/'+theMovie+'.json';\n        var URL = 'http://api.themoviedb.org/3/search/movie?api_key=c1a2641a1bdc4fe90e68907afed3e1e5&query='+theMovie;\n        var ajaxURL = encodeURI(URL);\n        $.ajax({\n          url: ajaxURL,\n          success: function(data, textStatus, xhr) {\n            var movie = data;\n            movieCollection.push(movie.results[0]);\n            writeToFile(i);\n            i++;\n            \n            // old line that writes out a file for each movie\n            // fs.writeFile(filename, JSON.stringify(data.results[0], null, 4));\n           \n          }\n        }); // end ajax call\n      } \n    } // end for in\n});\n\nfunction getMoreDetails(movies){\n  var i = 1;\n  for (var x in movies){\n  	try{\n  		var Movie = movies[x].id;\n  	}\n	catch(err){\n		// sometimes a movie can note be found on themovie database if this is\n		// the case catch the error thrown \n		console.log('error =',err);\n	}\n    \n    getMDBitemFull(Movie);\n\n    function getMDBitemFull(currentMovie){\n      var ajaxURL = 'http://api.themoviedb.org/3/movie/'+currentMovie+'?api_key=c1a2641a1bdc4fe90e68907afed3e1e5';\n      $.ajax({\n          url: ajaxURL,\n          success: function(data, textStatus, xhr) {\n            var movie = data;\n            $.ajax({\n              url: 'https://www.googleapis.com/youtube/v3/search?part=snippet&q='+movie.title+'%20Trailer%20HD&key=AIzaSyAq6x7_2dfd3jH_iBIMzR1-oLFRzFXKMdY' \n            }).success(function(data){\n              movie.trailer = data.items[0].id.videoId;\n               movieCollectionFullDetails.push(movie);\n             if(i == movies.length){\n              \n              fs.writeFile(path+'/'+'movies-collection.json', JSON.stringify(movieCollectionFullDetails, null, 4));\n             }\n            i++;\n            });\n\n            \n          }\n      }); // end ajax call\n    }  \n  }\n}\n\nfunction getReleaseWeek(){\n  var curr = new Date; // get current date\n  var first = curr.getDate() - curr.getDay(); // First day is the day of the month - the day of the week\n  var last = first + 6; // last day is the first day + 6\n\n  var firstday = new Date(curr.setDate(first)); // first sunday of the week\n\n  var momentObject = moment(firstday); // date converted to moment.js\n  var phasedDate = momentObject.format(\"D-M-YYYY\"); // format with moment.js\n\n  return phasedDate;\n}\n\n\n////// get configeration\n\n$.ajax({\n  url: 'http://api.themoviedb.org/3/configuration?api_key=c1a2641a1bdc4fe90e68907afed3e1e5' \n}).success(function(data){\n  fs.writeFile(path+'/'+'mdbConfig.json', JSON.stringify(data, null, 4));\n});\n\n////// functions called above\n\n// write the collection to a file\nfunction writeToFile(b){\n  if(b == tomatoesRecent.movies.length){ \n\n    getMoreDetails(movieCollection);\n    // write the film collection to a file\n  }\n}\n\n// removes odd charaters in titles\nfunction cleanTitle(title){\n  var symbols = {\n    '@': '%40',\n    '&amp;': '%26',\n    '*': '%2A',\n    '+': '%2B',\n    '/': '%2F',\n    '&lt;': '%3C',\n    '&gt;': '%3E'\n  };\n  title = title.replace(/([@*+/]|&(amp|lt|gt);)/g, function (m) { return symbols[m]; });\n  return title;\n}\n\n\n/////////  END OF GETTING RECENT FILMS FROM MDB ////////////\n\n\n",
			"file": "app copy.js",
			"file_size": 5326,
			"file_write_time": 1357502967000000,
			"settings":
			{
				"buffer_size": 5312,
				"line_ending": "Unix"
			}
		},
		{
			"file": "public/javascripts/app.js",
			"settings":
			{
				"buffer_size": 7754,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 0 files for \"movieCollection\"\n\n0 matches across 0 files\n\n\nSearching 1115 files for \"tmbdCollection\"\n\n0 matches across 0 files\n",
			"settings":
			{
				"buffer_size": 136,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"contents": "// The client id is obtained from the Google APIs Console at https://code.google.com/apis/console\n// If you run access this code from a server other than http://localhost, you need to register\n// your own client id.\nvar OAUTH2_CLIENT_ID = '1036347251836.apps.googleusercontent.com';\nvar OAUTH2_SCOPES = [\n  'https://www.googleapis.com/auth/youtube'\n];\n\n// This callback is invoked by the Google APIs JS client automatically when it is loaded.\ngoogleApiClientReady = function() {\n  gapi.auth.init(function() {\n    window.setTimeout(checkAuth, 1);\n    console.log('clientcall');\n  });\n}\n\n// Attempt the immediate OAuth 2 client flow as soon as the page is loaded.\n// If the currently logged in Google Account has previously authorized OAUTH2_CLIENT_ID, then\n// it will succeed with no user intervention. Otherwise, it will fail and the user interface\n// to prompt for authorization needs to be displayed.\nfunction checkAuth() {\n  gapi.auth.authorize({\n    client_id: OAUTH2_CLIENT_ID,\n    scope: OAUTH2_SCOPES,\n    immediate: true\n  }, handleAuthResult);\n  console.log('checkAuth');\n  loadAPIClientInterfaces();\n}\n\n// Handles the result of a gapi.auth.authorize() call.\nfunction handleAuthResult(authResult) {\n  console.log('results', authResult);\n  if (authResult) {\n    // Auth was successful; hide the things related to prompting for auth and show the things\n    // that should be visible after auth succeeds.\n    $('.pre-auth').hide();\n    loadAPIClientInterfaces();\n  } else {\n    // Make the #login-link clickable, and attempt a non-immediate OAuth 2 client flow.\n    // The current function will be called when that flow is complete.\n    $('#login-link').click(function() {\n      gapi.auth.authorize({\n        client_id: OAUTH2_CLIENT_ID,\n        scope: OAUTH2_SCOPES,\n        immediate: false\n        }, handleAuthResult);\n    });\n  }\n}\n\n// Loads the client interface for the YouTube Analytics and Data APIs.\n// This is required before using the Google APIs JS client; more info is available at\n// http://code.google.com/p/google-api-javascript-client/wiki/GettingStarted#Loading_the_Client\nfunction loadAPIClientInterfaces() {\n  gapi.client.load('youtube', 'v3', function() {\n    console.log('youtube loaded');\n  });\n}\n\n",
			"file": "public/javascripts/auth.js",
			"file_size": 2227,
			"file_write_time": 1357433248000000,
			"settings":
			{
				"buffer_size": 2227,
				"line_ending": "Unix"
			}
		},
		{
			"file": "public/index.html",
			"settings":
			{
				"buffer_size": 2159,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/AAAPackageDev/Support/JSON to Property List.sublime-build",
	"command_palette":
	{
		"height": 375.0,
		"selected_items":
		[
			[
				"emme",
				"Emmet: Expand Abbreviation"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"emm",
				"Emmet: Expand Abbreviation"
			],
			[
				"emmet",
				"Emmet: Expand Abbreviation"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: rem",
				"Package Control: Remove Package"
			],
			[
				"Package Control: re",
				"Package Control: Remove Package"
			],
			[
				"Package Control: install ",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Remove Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"packag",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"set jQ",
				"Set Syntax: jQuery (JavaScript)"
			],
			[
				"set jquer",
				"Set Syntax: jQuery (JavaScript)"
			]
		],
		"width": 462.0
	},
	"console":
	{
		"height": 93.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/scott/Documents/-Learning/whensItOut_node/public/javascripts/app.js",
		"/Users/scott/Documents/-Learning/whensItOut/app/styles/small-device.sass",
		"/Users/scott/Documents/-Learning/whensItOut/app/index.html",
		"/Users/scott/Documents/-Learning/whensItOut/app/styles/main.scss",
		"/Users/scott/Documents/-Learning/whensItOut/app/scripts/app.js",
		"/Users/scott/Documents/-Learning/whensItOut/app/scripts/app copy.js",
		"/Users/scott/Documents/-Learning/whensItOut/app/scripts/loader.js",
		"/Users/scott/Library/Application Support/Sublime Text 2/Packages/Emmet/Emmet.sublime-settings",
		"/Users/scott/Documents/-Learning/whensItOut/app/styles/main.css",
		"/Users/scott/Documents/-Learning/instagrid/app/index.html",
		"/Users/scott/Documents/-Learning/instagrid/app/scripts/scripts.js",
		"/Users/scott/Documents/-Learning/deferres/app/scripts/app.js",
		"/Users/scott/Sites/www.badger-construction.co.uk/Contact/contact.php",
		"/Users/scott/Sites/www.badger-construction.co.uk/index.html",
		"/Users/scott/Documents/-Learning/whensItOut/app.js",
		"/Users/scott/Documents/-Learning/backbone_test/app/scripts/music2.js",
		"/Users/scott/Documents/-Learning/backbone_test/app/scripts/music3.js",
		"/Users/scott/Documents/-Learning/backbone_test/app/index2.html",
		"/Users/scott/Documents/-Learning/backbone_test/app/scripts/app_old.js",
		"/Users/scott/Documents/-- Learning/backbone-tunes-new/app/index.html",
		"/Users/scott/Documents/-Learning/backbone-tunes-new/app/js/Tunes.js",
		"/Users/scott/Documents/-- Learning/instagrid/css/styles.css",
		"/Users/scott/Documents/-- Learning/instagrid/testPage.html",
		"/Users/scott/Documents/-- Learning/yeomen/app/index.html",
		"/Users/scott/Documents/-- Learning/instagram/index.html",
		"/Users/scott/Documents/-- Learning/instagram/js/scripts.js",
		"/Users/scott/Documents/-- Learning/instagram/css/styles.css",
		"/Users/scott/Documents/-- Learning/instagram/testPage.html",
		"/Users/scott/Documents/-- Learning/train_test/js/custom.js",
		"/Users/scott/Documents/-- Learning/json/js/ie7-squish.js",
		"/Users/scott/Library/Application Support/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/Users/scott/Library/Application Support/Sublime Text 2/Packages/User/SVN.sublime-settings",
		"/Users/scott/Library/Application Support/Sublime Text 2/Packages/User/SFTP.sublime-settings",
		"/Users/scott/Documents/-- Learning/backbone/backbone/.editorconfig",
		"/Users/scott/Documents/-- Learning/backbone/backbone/.nojekyll",
		"/Users/scott/Library/Application Support/Sublime Text 2/Packages/SVN/SVN.sublime-settings",
		"/Users/scott/Library/Application Support/Sublime Text 2/Packages/User/Default (OSX).sublime-keymap",
		"/Users/scott/Documents/-- Learning/backbone/Backbone-playground/script.js",
		"/Users/scott/Documents/-- Learning/backbone/backbone/assets/jasmine/jasmine.css",
		"/Users/scott/Documents/-- Learning/backbone/sftp-config.json",
		"/Users/scott/Library/Application Support/Sublime Text 2/Packages/User/sftp_servers/72circles",
		"/Users/scott/Documents/-- Learning/backbone/backbone/assets/jasmine/sftp-config.json",
		"/var/folders/vp/tq0r4n3n74q81c0v64fhnmq40000gn/T/sublime-sftp-browse-1343850963/72circles/playground/Backbone/application.js",
		"/var/folders/vp/tq0r4n3n74q81c0v64fhnmq40000gn/T/sublime-sftp-browse-1343850963/72circles/sftp-config.json",
		"/var/folders/vp/tq0r4n3n74q81c0v64fhnmq40000gn/T/sublime-sftp-browse-1343850666/72circles/playground/Backbone/application.js",
		"/var/folders/vp/tq0r4n3n74q81c0v64fhnmq40000gn/T/sublime-sftp-browse-1343850807/72circles/playground/Backbone/application.js",
		"/var/folders/vp/tq0r4n3n74q81c0v64fhnmq40000gn/T/sublime-sftp-browse-1343850807/72circles/sftp-config.json",
		"/var/folders/vp/tq0r4n3n74q81c0v64fhnmq40000gn/T/sublime-sftp-browse-1343850666/72circles/sftp-config-alt.json",
		"/var/folders/vp/tq0r4n3n74q81c0v64fhnmq40000gn/T/sublime-sftp-browse-1343850295/72circles/sftp-config.json",
		"/var/folders/vp/tq0r4n3n74q81c0v64fhnmq40000gn/T/sublime-sftp-browse-1343850572/72circles/playground/Backbone/application.js",
		"/var/folders/vp/tq0r4n3n74q81c0v64fhnmq40000gn/T/sublime-sftp-browse-1343850572/72circles/sftp-config.json",
		"/var/folders/vp/tq0r4n3n74q81c0v64fhnmq40000gn/T/sublime-sftp-browse-1343850295/72circles/playground/Backbone/application.js",
		"/var/folders/vp/tq0r4n3n74q81c0v64fhnmq40000gn/T/sublime-sftp-browse-1343849978/72circles/playground/Backbone/backbone.js",
		"/var/folders/vp/tq0r4n3n74q81c0v64fhnmq40000gn/T/sublime-sftp-browse-1343849978/72circles/sftp-config.json",
		"/Users/scott/Desktop/test.js",
		"/var/folders/vp/tq0r4n3n74q81c0v64fhnmq40000gn/T/sublime-sftp-browse-1343849489/72circles/playground/Backbone/application.js"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 95.0,
		"where_history":
		[
			"",
			"tmbdCollection",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"youtube",
			"console.log",
			"posterURL",
			"url",
			"movieCollection",
			"url",
			"tmdbmovie",
			"youtube",
			"tmdbCollection",
			"tmbdCollection",
			"tmdbCollection",
			"getMoreDetails",
			"writeToFile",
			"tmbdCollection",
			"tmdbCollection",
			"movieCollection",
			"tmbdCollection",
			"movieCollection",
			"collection",
			"url",
			"getMoreDetails",
			"for",
			"sort",
			"$.when(tomatoesRequest",
			"movieCollec",
			"movieCollectionFullDetails",
			"getMoreDetails",
			"movies",
			"movieCollection",
			"getMoreDetails",
			"writeToFile",
			"loadAPIClientInterfaces",
			"path",
			"handleAPILoaded",
			"your",
			"isActive",
			"firstItemSelected",
			"disab",
			"firstItemSelected",
			"firstRender",
			"viewClosed",
			"this.f",
			"console",
			"false",
			"this.model.set",
			"isActive",
			"console",
			"        \n",
			"isActive",
			"isAct",
			"active",
			".off",
			"films-view",
			"el",
			"render",
			"MODEL",
			"active",
			"addOne",
			"get",
			"find",
			"removeOne",
			"films",
			"details",
			"css",
			"details",
			"li",
			"film",
			"console.log",
			"viewOpen",
			".close-link",
			"call",
			"currentTarge",
			"viewOpen",
			"console.",
			"console.log",
			"deleg",
			"unde",
			"$el",
			".on",
			"close-l",
			"close-link",
			"close-",
			"addCloseBtn",
			"close-",
			"close",
			"data",
			"films",
			"attrib",
			"id ",
			"border",
			"$backgroundImageNew",
			".films-view li",
			"$('.films-view li')",
			".each",
			"config",
			"offset",
			"position",
			"top",
			">\n",
			"this.",
			"console.log",
			"film",
			"config",
			"backdrop",
			"backdro",
			"console.log",
			"console.loh",
			"forEach",
			"render",
			" data-id=\"<%= id %>\" ",
			"get",
			"films",
			"movies/",
			"movies",
			"config",
			"confi",
			"id",
			"addone",
			"Films",
			"films",
			"console",
			"viewActive",
			"itemPosition",
			"background",
			"complete",
			"counter",
			"checkFlag",
			"id"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"movieCollection",
			"tmbdCollection",
			"active",
			"firstItemSelected",
			"removeFirstItem",
			"mbdConfig",
			"viewOpened",
			"itemPosition",
			"offset.top",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "app.js",
					"settings":
					{
						"buffer_size": 4673,
						"regions":
						{
						},
						"selection":
						[
							[
								4464,
								4464
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1953.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"settings":
					{
						"buffer_size": 4121,
						"regions":
						{
						},
						"selection":
						[
							[
								1751,
								1727
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 999.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "app copy.js",
					"settings":
					{
						"buffer_size": 5312,
						"regions":
						{
						},
						"selection":
						[
							[
								3927,
								3395
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "public/javascripts/app.js",
					"settings":
					{
						"buffer_size": 7754,
						"regions":
						{
						},
						"selection":
						[
							[
								1109,
								1118
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 492.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"settings":
					{
						"buffer_size": 136,
						"regions":
						{
						},
						"selection":
						[
							[
								68,
								68
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"incomplete_sync": null,
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 68.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "public/javascripts/auth.js",
					"settings":
					{
						"buffer_size": 2227,
						"regions":
						{
						},
						"selection":
						[
							[
								280,
								240
							],
							[
								351,
								351
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "public/index.html",
					"settings":
					{
						"buffer_size": 2159,
						"regions":
						{
						},
						"selection":
						[
							[
								1745,
								1745
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"is_xml": false,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 278.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.jslint_result_view":
	{
		"height": 112.0
	},
	"output.sftp":
	{
		"height": 112.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": false,
	"side_bar_visible": true,
	"side_bar_width": 174.0,
	"status_bar_visible": true
}
